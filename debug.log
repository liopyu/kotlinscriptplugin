[Log] Loading classes from binary file...
[Log] Loaded 48047 classes from binary file.
[Log] Loading typing suggestions from JSON file...
[Log] Loaded 1170 typing suggestions.
[Log] Typing suggestions loaded: 1170
[Log] Semantic Tokens Provider Initialized
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a 
        {
            b      
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a 
        {
            b      
        }(), Type: statements
[Log] Node number: 7, Text: a 
        {
            b      
        }(), Type: call_expression
[Log] Node number: 8, Text: a 
        {
            b      
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b      
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b      
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b      
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a 
        {
            b      
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b      
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a 
        {
            b      
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a 
        {
            b      
        }(), Type: statements
[Log] Node number: 7, Text: a 
        {
            b      
        }(), Type: call_expression
[Log] Node number: 8, Text: a 
        {
            b      
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b      
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b      
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b      
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a 
        {
            b      
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b      
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a 
        {
            b      
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a 
        {
            b      
        }(), Type: statements
[Log] Node number: 7, Text: a 
        {
            b      
        }(), Type: call_expression
[Log] Node number: 8, Text: a 
        {
            b      
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b      
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b      
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b      
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a 
        {
            b      
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b      
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a 
        {
            b      
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a 
        {
            b      
        }(), Type: statements
[Log] Node number: 7, Text: a 
        {
            b      
        }(), Type: call_expression
[Log] Node number: 8, Text: a 
        {
            b      
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b      
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b      
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b      
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a 
        {
            b      
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b      
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a 
        {
            b      
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a 
        {
            b      
        }(), Type: statements
[Log] Node number: 7, Text: a 
        {
            b      
        }(), Type: call_expression
[Log] Node number: 8, Text: a 
        {
            b      
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b      
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b      
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b      
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a 
        {
            b      
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b      
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a 
        {
            b      
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a 
        {
            b      
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a 
        {
            b      
        }(), Type: statements
[Log] Node number: 7, Text: a 
        {
            b      
        }(), Type: call_expression
[Log] Node number: 8, Text: a 
        {
            b      
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b      
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b      
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b      
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a 
        {
            b      
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b      
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a 
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a 
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a 
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a 
        {
            b
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a 
        {
            b
        }(), Type: statements
[Log] Node number: 7, Text: a 
        {
            b
        }(), Type: call_expression
[Log] Node number: 8, Text: a 
        {
            b
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a 
        {
            b
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (0:0) - (5:1)
    - Changed Range: (3:12) - (3:13)
    - INTERSECTS: true
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (2:8) - (4:9)
    - Changed Range: (3:12) - (3:13)
    - INTERSECTS: true
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (6:0) - (11:1)
    - Changed Range: (3:12) - (3:13)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (8:8) - (10:9)
    - Changed Range: (3:12) - (3:13)
    - INTERSECTS: false
[Log] 
[findClosestParentScopeRange] Starting search from innermost scope ID 2:8:2
[Log]   - Checking Parent Scope ID 2:8:2: (2:8) - (4:9)
[Log]     - Found a valid parent scope: ID 2:8:2
[Log] [getScopeRange] Scope ID 2:8:2 has range (2:8) - (4:9)
[Log] [findClosestParentScopeRange] Found closest valid parent scope ID 2:8:2 with range (2:8) - (4:9)
[Log] Final modified range will be: (2:8) - (4:9)
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a
        {
            b
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a
        {
            b
        }(), Type: statements
[Log] Node number: 7, Text: a
        {
            b
        }(), Type: call_expression
[Log] Node number: 8, Text: a
        {
            b
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a
        {
            b
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (0:0) - (5:1)
    - Changed Range: (1:4) - (1:5)
    - INTERSECTS: true
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (2:8) - (4:9)
    - Changed Range: (1:4) - (1:5)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (6:0) - (11:1)
    - Changed Range: (1:4) - (1:5)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (8:8) - (10:9)
    - Changed Range: (1:4) - (1:5)
    - INTERSECTS: false
[Log] 
[findClosestParentScopeRange] Starting search from innermost scope ID 0:0:1
[Log]   - Checking Parent Scope ID 0:0:1: (0:0) - (5:1)
[Log]     - Found a valid parent scope: ID 0:0:1
[Log] [getScopeRange] Scope ID 0:0:1 has range (0:0) - (5:1)
[Log] [findClosestParentScopeRange] Found closest valid parent scope ID 0:0:1 with range (0:0) - (5:1)
[Log] Final modified range will be: (0:0) - (5:1)
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d  
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a
        {
            b
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a
        {
            b
        }(), Type: statements
[Log] Node number: 7, Text: a
        {
            b
        }(), Type: call_expression
[Log] Node number: 8, Text: a
        {
            b
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d  
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d  
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d  
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d  
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d  
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d  
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d  
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d  
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d  
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a
        {
            b
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d  
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d  
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (0:0) - (5:1)
    - Changed Range: (7:4) - (7:5)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (2:8) - (4:9)
    - Changed Range: (7:4) - (7:5)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (6:0) - (11:1)
    - Changed Range: (7:4) - (7:5)
    - INTERSECTS: true
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (8:8) - (10:9)
    - Changed Range: (7:4) - (7:5)
    - INTERSECTS: false
[Log] 
[findClosestParentScopeRange] Starting search from innermost scope ID 6:0:1
[Log]   - Checking Parent Scope ID 6:0:1: (6:0) - (11:1)
[Log]     - Found a valid parent scope: ID 6:0:1
[Log] [getScopeRange] Scope ID 6:0:1 has range (6:0) - (11:1)
[Log] [findClosestParentScopeRange] Found closest valid parent scope ID 6:0:1 with range (6:0) - (11:1)
[Log] Final modified range will be: (6:0) - (11:1)
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a
        {
            b
        }()  
}()
{
    c
        {
            d
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a
        {
            b
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a
        {
            b
        }(), Type: statements
[Log] Node number: 7, Text: a
        {
            b
        }(), Type: call_expression
[Log] Node number: 8, Text: a
        {
            b
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a
        {
            b
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (0:0) - (5:1)
    - Changed Range: (9:12) - (9:13)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (2:8) - (4:9)
    - Changed Range: (9:12) - (9:13)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (6:0) - (11:1)
    - Changed Range: (9:12) - (9:13)
    - INTERSECTS: true
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (8:8) - (10:9)
    - Changed Range: (9:12) - (9:13)
    - INTERSECTS: true
[Log] 
[findClosestParentScopeRange] Starting search from innermost scope ID 8:8:2
[Log]   - Checking Parent Scope ID 8:8:2: (8:8) - (10:9)
[Log]     - Found a valid parent scope: ID 8:8:2
[Log] [getScopeRange] Scope ID 8:8:2 has range (8:8) - (10:9)
[Log] [findClosestParentScopeRange] Found closest valid parent scope ID 8:8:2 with range (8:8) - (10:9)
[Log] Final modified range will be: (8:8) - (10:9)
[Log] Updating SemanticTokens
[Log] Node number: 1, Text: {
    a
        {
            b 
        }()  
}()
{
    c
        {
            d
        }()
}(), Type: source_file
[Log] Node number: 2, Text: {
    a
        {
            b 
        }()  
}()
{
    c
        {
            d
        }()
}(), Type: call_expression
[Log] Node number: 3, Text: {
    a
        {
            b 
        }()  
}()
{
    c
        {
            d
        }()
}, Type: call_expression
[Log] Node number: 4, Text: {
    a
        {
            b 
        }()  
}, Type: lambda_literal
[Log] Node number: 5, Text: {, Type: {
[Log] Entering Scope: 5
[Log] Node number: 6, Text: a
        {
            b 
        }(), Type: statements
[Log] Node number: 7, Text: a
        {
            b 
        }(), Type: call_expression
[Log] Node number: 8, Text: a
        {
            b 
        }, Type: call_expression
[Log] Node number: 9, Text: a, Type: simple_identifier
[Log] Node number: 10, Text: {
            b 
        }, Type: call_suffix
[Log] Node number: 11, Text: {
            b 
        }, Type: annotated_lambda
[Log] Node number: 12, Text: {
            b 
        }, Type: lambda_literal
[Log] Node number: 13, Text: {, Type: {
[Log] Entering Scope: 13
[Log] Node number: 14, Text: b, Type: statements
[Log] Node number: 15, Text: b, Type: simple_identifier
[Log] Node number: 16, Text: }, Type: }
[Log] Exiting Scope: 16
[Log] Node number: 17, Text: (), Type: call_suffix
[Log] Node number: 18, Text: (), Type: value_arguments
[Log] Node number: 19, Text: (, Type: (
[Log] Node number: 20, Text: ), Type: )
[Log] Node number: 21, Text: }, Type: }
[Log] Exiting Scope: 21
[Log] Node number: 22, Text: ()
{
    c
        {
            d
        }()
}, Type: call_suffix
[Log] Node number: 23, Text: (), Type: value_arguments
[Log] Node number: 24, Text: (, Type: (
[Log] Node number: 25, Text: ), Type: )
[Log] Node number: 26, Text: {
    c
        {
            d
        }()
}, Type: annotated_lambda
[Log] Node number: 27, Text: {
    c
        {
            d
        }()
}, Type: lambda_literal
[Log] Node number: 28, Text: {, Type: {
[Log] Entering Scope: 28
[Log] Node number: 29, Text: c
        {
            d
        }(), Type: statements
[Log] Node number: 30, Text: c
        {
            d
        }(), Type: call_expression
[Log] Node number: 31, Text: c
        {
            d
        }, Type: call_expression
[Log] Node number: 32, Text: c, Type: simple_identifier
[Log] Node number: 33, Text: {
            d
        }, Type: call_suffix
[Log] Node number: 34, Text: {
            d
        }, Type: annotated_lambda
[Log] Node number: 35, Text: {
            d
        }, Type: lambda_literal
[Log] Node number: 36, Text: {, Type: {
[Log] Entering Scope: 36
[Log] Node number: 37, Text: d, Type: statements
[Log] Node number: 38, Text: d, Type: simple_identifier
[Log] Node number: 39, Text: }, Type: }
[Log] Exiting Scope: 39
[Log] Node number: 40, Text: (), Type: call_suffix
[Log] Node number: 41, Text: (), Type: value_arguments
[Log] Node number: 42, Text: (, Type: (
[Log] Node number: 43, Text: ), Type: )
[Log] Node number: 44, Text: }, Type: }
[Log] Exiting Scope: 44
[Log] Node number: 45, Text: (), Type: call_suffix
[Log] Node number: 46, Text: (), Type: value_arguments
[Log] Node number: 47, Text: (, Type: (
[Log] Node number: 48, Text: ), Type: )
[Log] Scope ID: global:0
[Log] StartPoint: : null
[Log] EndPoint: : null
[Log] Scope ID: 0:0:1
[Log] Word at Range: "{
    a
        {
            b 
        }()  
}"
[Log] StartPoint: : {"line":0,"character":0}
[Log] EndPoint: : {"line":5,"character":1}
[Log] Scope ID: 2:8:2
[Log] Word at Range: "{
            b 
        }"
[Log] StartPoint: : {"line":2,"character":8}
[Log] EndPoint: : {"line":4,"character":9}
[Log] Scope ID: 6:0:1
[Log] Word at Range: "{
    c
        {
            d
        }()
}"
[Log] StartPoint: : {"line":6,"character":0}
[Log] EndPoint: : {"line":11,"character":1}
[Log] Scope ID: 8:8:2
[Log] Word at Range: "{
            d
        }"
[Log] StartPoint: : {"line":8,"character":8}
[Log] EndPoint: : {"line":10,"character":9}
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (0:0) - (5:1)
    - Changed Range: (3:13) - (3:14)
    - INTERSECTS: true
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (2:8) - (4:9)
    - Changed Range: (3:13) - (3:14)
    - INTERSECTS: true
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (6:0) - (11:1)
    - Changed Range: (3:13) - (3:14)
    - INTERSECTS: false
[Log] [rangesIntersect] Checking intersection:
    - Scope Range: (8:8) - (10:9)
    - Changed Range: (3:13) - (3:14)
    - INTERSECTS: false
[Log] 
[findClosestParentScopeRange] Starting search from innermost scope ID 2:8:2
[Log]   - Checking Parent Scope ID 2:8:2: (2:8) - (4:9)
[Log]     - Found a valid parent scope: ID 2:8:2
[Log] [getScopeRange] Scope ID 2:8:2 has range (2:8) - (4:9)
[Log] [findClosestParentScopeRange] Found closest valid parent scope ID 2:8:2 with range (2:8) - (4:9)
[Log] Final modified range will be: (2:8) - (4:9)
