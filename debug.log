[Log] Loading classes from binary file...
[Log] Loaded 96581 classes from binary file.
[Log] Loading typing suggestions from JSON file...
[Log] Loaded 3214 typing suggestions.
[Log] Loaded 56647 member suggestions.
[Log] Loaded 108981 classes from JSON file.
[Log] Typing suggestions loaded: 3214
[Log] Semantic Tokens Provider Initialized
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    
}
[Log]       [3] block: {
    
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val
}
[Log]       [3] block: {
    val
}
[Log]         [4] {: {
[Log]         [4] ERROR: val
[Log]           [5] binding_pattern_kind: val
[Log]             [6] val: val
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val valName: Unit = initialValue
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val valName: Unit = initialValue
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val valName: Unit = initialValue
}
[Log]       [3] block: {
    val valName: Unit = initialValue
}
[Log]         [4] {: {
[Log]         [4] statements: val valName: Unit = initialValue
[Log]           [5] property_declaration: val valName: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: valName: Unit
[Log]               [7] simple_identifier: valName
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val e: Unit = initialValue
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val e: Unit = initialValue
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val e: Unit = initialValue
}
[Log]       [3] block: {
    val e: Unit = initialValue
}
[Log]         [4] {: {
[Log]         [4] statements: val e: Unit = initialValue
[Log]           [5] property_declaration: val e: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: e: Unit
[Log]               [7] simple_identifier: e
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val i: Unit = initialValue
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val i: Unit = initialValue
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val i: Unit = initialValue
}
[Log]       [3] block: {
    val i: Unit = initialValue
}
[Log]         [4] {: {
[Log]         [4] statements: val i: Unit = initialValue
[Log]           [5] property_declaration: val i: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i: Unit
[Log]               [7] simple_identifier: i
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val i: Unit = initialValue
    val i: Unit = initialValue
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val i: Unit = initialValue
    val i: Unit = initialValue
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val i: Unit = initialValue
    val i: Unit = initialValue
}
[Log]       [3] block: {
    val i: Unit = initialValue
    val i: Unit = initialValue
}
[Log]         [4] {: {
[Log]         [4] statements: val i: Unit = initialValue
    val i: Unit = initialValue
[Log]           [5] property_declaration: val i: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i: Unit
[Log]               [7] simple_identifier: i
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]           [5] property_declaration: val i: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i: Unit
[Log]               [7] simple_identifier: i
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val i: Unit = initialValue
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val i: Unit = initialValue
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val i: Unit = initialValue
}
[Log]       [3] block: {
    val i: Unit = initialValue
}
[Log]         [4] {: {
[Log]         [4] statements: val i: Unit = initialValue
[Log]           [5] property_declaration: val i: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i: Unit
[Log]               [7] simple_identifier: i
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val i: Unit = initialValue
    val i: Unit = initialValue
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val i: Unit = initialValue
    val i: Unit = initialValue
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val i: Unit = initialValue
    val i: Unit = initialValue
}
[Log]       [3] block: {
    val i: Unit = initialValue
    val i: Unit = initialValue
}
[Log]         [4] {: {
[Log]         [4] statements: val i: Unit = initialValue
    val i: Unit = initialValue
[Log]           [5] property_declaration: val i: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i: Unit
[Log]               [7] simple_identifier: i
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]           [5] property_declaration: val i: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i: Unit
[Log]               [7] simple_identifier: i
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val i: Unit = initialValue
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val i: Unit = initialValue
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val i: Unit = initialValue
}
[Log]       [3] block: {
    val i: Unit = initialValue
}
[Log]         [4] {: {
[Log]         [4] statements: val i: Unit = initialValue
[Log]           [5] property_declaration: val i: Unit = initialValue
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i: Unit
[Log]               [7] simple_identifier: i
[Log]               [7] :: :
[Log]               [7] user_type: Unit
[Log]                 [8] type_identifier: Unit
[Log]             [6] =: =
[Log]             [6] simple_identifier: initialValue
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val i: 
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val i: 
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val i: 
}
[Log]       [3] block: {
    val i: 
}
[Log]         [4] {: {
[Log]         [4] statements: val i:
[Log]           [5] property_declaration: val i
[Log]             [6] binding_pattern_kind: val
[Log]               [7] val: val
[Log]             [6] variable_declaration: i
[Log]               [7] simple_identifier: i
[Log]           [5] ERROR: :
[Log]             [6] :: :
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
    val 
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
    val 
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
    val 
}
[Log]       [3] block: {
    val 
}
[Log]         [4] {: {
[Log]         [4] ERROR: val
[Log]           [5] binding_pattern_kind: val
[Log]             [6] val: val
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {

} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {

}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {

}
[Log]       [3] block: {

}
[Log]         [4] {: {
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
i
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
i
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
i
}
[Log]       [3] block: {
i
}
[Log]         [4] {: {
[Log]         [4] statements: i
[Log]           [5] simple_identifier: i
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
kotlin.reflect.jvm.internal.impl.utils.identity()
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
kotlin.reflect.jvm.internal.impl.utils.identity()
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
kotlin.reflect.jvm.internal.impl.utils.identity()
}
[Log]       [3] block: {
kotlin.reflect.jvm.internal.impl.utils.identity()
}
[Log]         [4] {: {
[Log]         [4] statements: kotlin.reflect.jvm.internal.impl.utils.identity()
[Log]           [5] call_expression: kotlin.reflect.jvm.internal.impl.utils.identity()
[Log]             [6] navigation_expression: kotlin.reflect.jvm.internal.impl.utils.identity
[Log]               [7] navigation_expression: kotlin.reflect.jvm.internal.impl.utils
[Log]                 [8] navigation_expression: kotlin.reflect.jvm.internal.impl
[Log]                   [9] navigation_expression: kotlin.reflect.jvm.internal
[Log]                     [10] navigation_expression: kotlin.reflect.jvm
[Log]                       [11] navigation_expression: kotlin.reflect
[Log]                         [12] simple_identifier: kotlin
[Log]                         [12] navigation_suffix: .reflect
[Log]                           [13] .: .
[Log]                           [13] simple_identifier: reflect
[Log]                       [11] navigation_suffix: .jvm
[Log]                         [12] .: .
[Log]                         [12] simple_identifier: jvm
[Log]                     [10] navigation_suffix: .internal
[Log]                       [11] .: .
[Log]                       [11] simple_identifier: internal
[Log]                   [9] navigation_suffix: .impl
[Log]                     [10] .: .
[Log]                     [10] simple_identifier: impl
[Log]                 [8] navigation_suffix: .utils
[Log]                   [9] .: .
[Log]                   [9] simple_identifier: utils
[Log]               [7] navigation_suffix: .identity
[Log]                 [8] .: .
[Log]                 [8] simple_identifier: identity
[Log]             [6] call_suffix: ()
[Log]               [7] value_arguments: ()
[Log]                 [8] (: (
[Log]                 [8] ): )
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
kotlin.reflect.jvm.internal.impl.utils.
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
kotlin.reflect.jvm.internal.impl.utils.
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
kotlin.reflect.jvm.internal.impl.utils.
}
[Log]       [3] block: {
kotlin.reflect.jvm.internal.impl.utils.
}
[Log]         [4] {: {
[Log]         [4] statements: kotlin.reflect.jvm.internal.impl.utils.
[Log]           [5] simple_identifier: kotlin
[Log]           [5] ERROR: .reflect.jvm.internal.impl.utils.
[Log]             [6] navigation_suffix: .reflect
[Log]               [7] .: .
[Log]               [7] simple_identifier: reflect
[Log]             [6] navigation_suffix: .jvm
[Log]               [7] .: .
[Log]               [7] simple_identifier: jvm
[Log]             [6] navigation_suffix: .internal
[Log]               [7] .: .
[Log]               [7] simple_identifier: internal
[Log]             [6] navigation_suffix: .impl
[Log]               [7] .: .
[Log]               [7] simple_identifier: impl
[Log]             [6] navigation_suffix: .utils
[Log]               [7] .: .
[Log]               [7] simple_identifier: utils
[Log]             [6] .: .
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
kotlin.reflect.jvm.internal.impl.
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
kotlin.reflect.jvm.internal.impl.
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
kotlin.reflect.jvm.internal.impl.
}
[Log]       [3] block: {
kotlin.reflect.jvm.internal.impl.
}
[Log]         [4] {: {
[Log]         [4] statements: kotlin.reflect.jvm.internal.impl.
[Log]           [5] simple_identifier: kotlin
[Log]           [5] ERROR: .reflect.jvm.internal.impl.
[Log]             [6] navigation_suffix: .reflect
[Log]               [7] .: .
[Log]               [7] simple_identifier: reflect
[Log]             [6] navigation_suffix: .jvm
[Log]               [7] .: .
[Log]               [7] simple_identifier: jvm
[Log]             [6] navigation_suffix: .internal
[Log]               [7] .: .
[Log]               [7] simple_identifier: internal
[Log]             [6] navigation_suffix: .impl
[Log]               [7] .: .
[Log]               [7] simple_identifier: impl
[Log]             [6] .: .
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
kotlin.reflect.jvm.internal
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
kotlin.reflect.jvm.internal
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
kotlin.reflect.jvm.internal
}
[Log]       [3] block: {
kotlin.reflect.jvm.internal
}
[Log]         [4] {: {
[Log]         [4] statements: kotlin.reflect.jvm.internal
[Log]           [5] navigation_expression: kotlin.reflect.jvm.internal
[Log]             [6] navigation_expression: kotlin.reflect.jvm
[Log]               [7] navigation_expression: kotlin.reflect
[Log]                 [8] simple_identifier: kotlin
[Log]                 [8] navigation_suffix: .reflect
[Log]                   [9] .: .
[Log]                   [9] simple_identifier: reflect
[Log]               [7] navigation_suffix: .jvm
[Log]                 [8] .: .
[Log]                 [8] simple_identifier: jvm
[Log]             [6] navigation_suffix: .internal
[Log]               [7] .: .
[Log]               [7] simple_identifier: internal
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
kotlin.reflect
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
kotlin.reflect
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
kotlin.reflect
}
[Log]       [3] block: {
kotlin.reflect
}
[Log]         [4] {: {
[Log]         [4] statements: kotlin.reflect
[Log]           [5] navigation_expression: kotlin.reflect
[Log]             [6] simple_identifier: kotlin
[Log]             [6] navigation_suffix: .reflect
[Log]               [7] .: .
[Log]               [7] simple_identifier: reflect
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {

} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {

}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {

}
[Log]       [3] block: {

}
[Log]         [4] {: {
[Log]         [4] }: }
[Log] updating tokens
[Log] Logging root node
[Log] [0] source_file: //@log-root-node
for (i in 0..segments) {
}

for (i in 0..segments) {
} 
[Log]   [1] line_comment: //@log-root-node
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log]   [1] for_statement: for (i in 0..segments) {
}
[Log]     [2] for: for
[Log]     [2] (: (
[Log]     [2] variable_declaration: i
[Log]       [3] simple_identifier: i
[Log]     [2] in: in
[Log]     [2] range_expression: 0..segments
[Log]       [3] integer_literal: 0
[Log]       [3] ..: ..
[Log]       [3] simple_identifier: segments
[Log]     [2] ): )
[Log]     [2] control_structure_body: {
}
[Log]       [3] block: {
}
[Log]         [4] {: {
[Log]         [4] }: }
[Log] updating tokens
